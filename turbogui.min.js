!function(t){const n=`__${t}.canvas`,i=2*Math.PI;customElements.define(`${t.toLowerCase()}-canvas`,class extends HTMLElement{connectedCallback(){const t=document.createElement("canvas");t.id=n,t.style.height=this.height=window.innerHeight,t.style.width=this.width=window.innerWidth,t.style.position=this.style.position="absolute",t.style.top=this.style.top="0",t.style.left=this.style.left="0",this.appendChild(t)}}),Object.defineProperty(globalThis,t,{value:t=>{const e={tasks:[],canvas:null,height:0,width:0,curveTo:void 0,lineTo:void 0},o=document.getElementById(n);let s=0;function h(){s=0,e.height=o.height=window.innerHeight,e.width=o.width=window.innerWidth;const n=o.getContext("2d");e.curveTo=(t,e,o,s,h,a,l=0,c=!0,d=()=>{})=>{let r=s-h;return c&&h>s&&(r+=i),!c&&h<s&&(r-=i),r/=a-l,i=>{i<l||i>a||(n.beginPath(),d(n),n.arc(t,e,o,s+r*(i-l),s+r*(i-l+1),!c),n.stroke())}},e.lineTo=(t,e,i,o,s,h=0,a=()=>{})=>{const l=s-h,c=(i-t)/l,d=(o-e)/l;return i=>{if(i<h||i>s)return;const o=t+c*(i-h),l=e+d*(i-h),r=t+c*(i-h+1),u=e+d*(i-h+1);n.beginPath(),a(n),n.moveTo(o,l),n.lineTo(r,u),n.stroke()}},e.canvas=n,t(e)}h(),window.addEventListener("resize",h),function t(){return e.tasks.forEach(t=>t(s)),s++,requestAnimationFrame(t)}()}})}("TurboGUI");